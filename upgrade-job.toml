# Realm Self-Upgrade Job: Upgrade the agent with freshly built binary
name = "self-upgrade-agent"
job_type = "one-shot"

[runtime]
type = "native"
binary = "/usr/bin/bash"
args = ["-c", """
set -euo pipefail
uname -a
echo "=== Preparing self-upgrade ==="

# Check if we have a freshly built binary
if [ -f /tmp/workspace/target/release/realm ]; then
  echo "Found freshly built binary, copying to artifacts..."
  mkdir -p /tmp/artifacts
  cp /tmp/workspace/target/release/realm /tmp/artifacts/realm-linux-x86_64
  chmod +x /tmp/artifacts/realm-linux-x86_64
else
  echo "No built binary found, checking for pre-staged binaries..."
  chmod +x /tmp/assets/realm-linux-x86_64 || true
  chmod +x /tmp/artifacts/realm-linux-x86_64 || true
fi

ls -la /tmp/assets/realm-linux-x86_64 || true
ls -la /tmp/artifacts/realm-linux-x86_64 || true

echo "=== Performing self-upgrade ==="
BIN_SRC=""
if [ -f /tmp/artifacts/realm-linux-x86_64 ]; then
  BIN_SRC="/tmp/artifacts/realm-linux-x86_64"
elif [ -f /tmp/assets/realm-linux-x86_64 ]; then
  BIN_SRC="/tmp/assets/realm-linux-x86_64"
else
  echo "No upgrade binary found in /tmp/artifacts or /tmp/assets" >&2
  exit 1
fi

OS=$(uname -s)
ARCH=$(uname -m)

case "$OS" in
  Linux)
    echo "=== Linux detected; installing to ~/.local/share/realm-agent/bin ==="
    DEST_ROOT="${HOME:-/root}/.local/share/realm-agent/bin"
    mkdir -p "$DEST_ROOT"
    SHA=$(sha256sum "$BIN_SRC" | cut -d' ' -f1)
    DEST_PATH="$DEST_ROOT/realm-agent-$SHA"
    install -m 0755 "$BIN_SRC" "$DEST_PATH"
    ln -sf "realm-agent-$SHA" "$DEST_ROOT/current"
    BIN_LINK_DIR="${HOME:-/root}/.local/bin"
    mkdir -p "$BIN_LINK_DIR"
    ln -sf "$DEST_PATH" "$BIN_LINK_DIR/realm"
    if command -v realm >/dev/null 2>&1; then
      echo "Existing realm binary: $(command -v realm)"
    else
      echo "Realm CLI not currently on PATH"
    fi
    echo "Scheduling agent restart via systemd-run (or fallback)..."
    if command -v systemd-run >/dev/null 2>&1; then
      systemd-run --user --on-active=5 /usr/bin/systemctl --user restart realm-agent.service >/dev/null 2>&1 || true
    elif command -v systemctl >/dev/null 2>&1; then
      nohup /bin/sh -c 'sleep 5 && systemctl --user restart realm-agent.service' >/dev/null 2>&1 &
    else
      echo "systemctl not available; please restart realm-agent manually"
    fi
    ;;
  Darwin)
    echo "=== macOS detected; installing to ~/Library/Application Support/realm-agent/bin ==="
    DEST_ROOT="${HOME}/Library/Application Support/realm-agent/bin"
    mkdir -p "$DEST_ROOT"
    SHA=$(shasum -a 256 "$BIN_SRC" | cut -d' ' -f1)
    DEST_PATH="$DEST_ROOT/realm-agent-$SHA"
    cp -f "$BIN_SRC" "$DEST_PATH"
    chmod +x "$DEST_PATH"
    ln -sf "realm-agent-$SHA" "$DEST_ROOT/current"
    BIN_LINK_DIR="${HOME}/.local/bin"
    mkdir -p "$BIN_LINK_DIR"
    ln -sf "$DEST_PATH" "$BIN_LINK_DIR/realm"
    if command -v realm >/dev/null 2>&1; then
      echo "Existing realm binary: $(command -v realm)"
    else
      echo "Realm CLI not currently on PATH"
    fi
    if command -v launchctl >/dev/null 2>&1; then
      echo "Scheduling launchd reload..."
      nohup /bin/sh -c 'sleep 5 && launchctl unload "${HOME}/Library/LaunchAgents/realm-agent.plist" && launchctl load "${HOME}/Library/LaunchAgents/realm-agent.plist"' >/dev/null 2>&1 &
    else
      echo "launchctl not available; please reload agent manually"
    fi
    ;;
  *)
    echo "Unsupported OS: $OS" >&2
    exit 1
    ;;
esac

# Verification will be handled by the orchestration script after restart
echo "=== Self-upgrade complete! ==="
"""]
memory_mb = 512

[execution]
working_dir = "/tmp"
timeout_minutes = 10

[targeting]
platform = "linux/x86_64"
tags = ["dev"]
